# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  email: String!
  login: String!
  name: String!
  password: String
  isBanned: Boolean!
  isPartner: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserPagination {
  data: [User!]!
  count: Int!
}

type ProfileResponse {
  id: String!
  email: String!
  role: String!
}

type AuthResponse {
  accessToken: String!
}

type EmailResponse {
  message: String!
}

type LogoutResponse {
  success: Boolean!
}

type FileEntity {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
  size: Int!
  extension: String!
}

type Banner {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishDate: DateTime!
  unpublishDate: DateTime!
  title: String!
  description: String
  type: BannerTypes!
  bannerImage: FileEntity!
  bannerVideo: FileEntity
  user: User!
}

enum BannerTypes {
  VIDEO
  STREAM
  IMAGE
}

type SubCategory {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  name: String!
}

type Category {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  name: String!
  subCategories: [SubCategory!]!
}

type Rating {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type Tag {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type Video {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  isBanned: Boolean!
  userId: Int!
  author: User!
  videoFile: FileEntity!
  videoPreview: FileEntity
  category: Category
  subCategory: SubCategory
  tags: [Tag!]
  comments: [Comment!]
  likes: [Rating!]
  dislikes: [Rating!]
}

type Comment {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  user: User!
  video: Video!
  parent: Comment
  replies: [Comment!]
  likes: [Rating!]
  dislikes: [Rating!]
}

type Notification {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: Notifications!
  user: User
}

enum Notifications {
  NEW_SUBSCRIBER
  NEW_LIKE
  NEW_DISLIKE
  NEW_COMMENT
  VIDEO_BLOCK
  VIDEO_UNBLOCK
  SYSTEM_UPDATE
}

type VideoPlaylist {
  video: Video!
}

type Playlist {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  privacy: String!
  user: User!
  videos: [VideoPlaylist!]
}

type Role {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  name: Roles!
}

enum Roles {
  USER
  MODERATOR
  ADMIN
}

type Setting {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  privacy: Privacy!
  user: User!
}

enum Privacy {
  OPEN
  CLOSED
}

type Monitoring {
  viewsCount: Int!
  likesCount: Int!
  dislikesCount: Int!
  commentsCount: Int!
  subscribersCount: Int!
}

type View {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  video: Video!
}

type Complaint {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  reason: ComplaintReasons!
  message: String!
  user: User
  video: Video
}

enum ComplaintReasons {
  NEGATIVE
  INCONSISTENCY
  RACISM
}

type PartnerRequest {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String!
  status: PartnerRequestStatuses!
  user: User!
}

enum PartnerRequestStatuses {
  OPEN
  APPROVED
  REJECTED
}

type Query {
  getUsers: [User!]!
  getUsersWithQuery(query: QuerySearchInput!): UserPagination!
  getUser(id: Int!): User!
  getMe: ProfileResponse!
  sendEmailVerification(email: String!): EmailResponse!
  verifyEmail(token: String!): EmailResponse!
  sendEmailForgotPassword(email: String!): EmailResponse!
  getRoles: [Role!]!
  getRole(id: Int!): Role!
  getCategories: [Category!]!
  getCategory(id: Int!): Category!
  getSubCategories: [SubCategory!]!
  getSubCategory(id: Int!): SubCategory!
  getTags: [Tag!]!
  getTag(id: Int!): Tag!
  getVideos: [Video!]!
  getVideo(id: Int!): Video!
  getPlaylists: [Playlist!]!
  getPlaylist(id: Int!): Playlist!
  getViews: [View!]!
  getView(id: Int!): View!
  getComments: [Comment!]!
  getComment(id: Int!): Comment!
  getRatings(type: RatingEnum!): [Rating!]!
  getRating(id: Int!, type: RatingEnum!): Rating!
  getBanners: [Banner!]!
  getBanner(id: Int!): Banner!
  getNotifications: [Notification!]!
  getNotification(id: Int!): Notification!
  getUserNotifications: [Notification!]!
  getSettings: [Setting!]!
  getSettingsById(id: Int!): Setting!
  getUserSettings: Setting!
  getComplaints: [Complaint!]!
  getComplaint(id: Int!): Complaint!
  getPartnerRequests: [PartnerRequest!]!
  getPartnerRequest(id: Int!): PartnerRequest!
}

input QuerySearchInput {
  limit: Int!
  offset: Int! = 100
  orderBy: String
  orderDirection: String = "asc"
  email: String
  login: String
  name: String
  isBanned: Boolean
  isPartner: Boolean
}

enum RatingEnum {
  LIKE
  DISLIKE
}

type Mutation {
  removeUser(id: Int!): User!
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
  register(input: SignUpInput!): AuthResponse!
  login(input: SignInInput!): AuthResponse!
  logout: LogoutResponse!
  refreshTokens: AuthResponse!
  setNewPassord(input: ResetPasswordInput!): EmailResponse!
  createRole(createRoleInput: CreateRoleInput!): Role!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  removeRole(id: Int!): Role!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: Int!): Category!
  createSubCategory(createSubCategoryInput: CreateSubCategoryInput!): SubCategory!
  updateSubCategory(updateSubCategoryInput: UpdateSubCategoryInput!): SubCategory!
  removeSubCategory(id: Int!): SubCategory!
  createTag(createTagInput: CreateTagInput!): Tag!
  updateTag(updateTagInput: UpdateTagInput!): Tag!
  removeTag(id: Int!): Tag!
  createVideo(createVideoInput: CreateVideoInput!): Video!
  uploadVideo(file: FileInput!): FileEntity!
  dropVideo(id: Int!): FileEntity!
  uploadPreview(file: FileInput!): FileEntity!
  dropPreview(id: Int!): FileEntity!
  updateVideo(updateVideoInput: UpdateVideoInput!): Video!
  removeVideo(id: Int!): Video!
  createPlaylist(createPlaylistInput: CreatePlaylistInput!): Playlist!
  updatePlaylist(updatePlaylistInput: UpdatePlaylistInput!): Playlist!
  addVideoToPlaylist(addVideoToPlaylistInput: VideoPlaylistInput!): Playlist!
  removeFromPlaylist(removeVideoFromPlaylistInput: VideoPlaylistInput!): Playlist!
  removePlaylist(id: Int!): Playlist!
  createView(createViewInput: CreateViewInput!): View!
  updateView(updateViewInput: UpdateViewInput!): View!
  removeView(id: Int!): View!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(id: Int!): Comment!
  createRating(createRatingInput: CreateRatingInput!): Rating!
  updateRating(updateRatingInput: UpdateRatingInput!): Rating!
  removeRating(id: Int!, type: RatingEnum!): Rating!
  createBanner(createBannerInput: CreateBannerInput!): Banner!
  uploadBannerVideo(file: FileInput!): FileEntity!
  dropBannerVideo(id: Int!): FileEntity!
  uploadBannerImage(file: FileInput!): FileEntity!
  dropBannerImage(id: Int!): FileEntity!
  updateBanner(updateBannerInput: UpdateBannerInput!): Banner!
  removeBanner(id: Int!): Banner!
  createNotification(createNotificationInput: CreateNotificationInput!): Notification!
  updateNotification(updateNotificationInput: UpdateNotificationInput!): Notification!
  removeNotification(id: Int!): Notification!
  createSettings(createSettingInput: CreateSettingInput!): Setting!
  updateSettings(updateSettingInput: UpdateSettingInput!): Setting!
  removeSettings(id: Int!): Setting!
  createComplaint(createComplaintInput: CreateComplaintInput!): Complaint!
  updateComplaint(updateComplaintInput: UpdateComplaintInput!): Complaint!
  removeComplaint(id: Int!): Complaint!
  createPartnerRequest(createPartnerRequestInput: CreatePartnerRequestInput!): PartnerRequest!
  updatePartnerRequest(updatePartnerRequestInput: UpdatePartnerRequestInput!): PartnerRequest!
  removePartnerRequest(id: Int!): PartnerRequest!
}

input CreateUserInput {
  email: String!
  login: String!
  name: String!
  password: String!
}

input UpdateUserInput {
  email: String
  login: String
  name: String
  password: String
  id: Int!
}

input SignUpInput {
  name: String!
  login: String!
  email: String!
  password: String!
}

input SignInInput {
  credentials: String!
  password: String!
}

input ResetPasswordInput {
  email: String!
  newPassword: String!
  token: String!
}

input CreateRoleInput {
  name: Roles!
}

input UpdateRoleInput {
  name: Roles
  id: Int!
}

input CreateCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  name: String
  id: Int!
}

input CreateSubCategoryInput {
  name: String!
  categoryId: Int!
}

input UpdateSubCategoryInput {
  name: String
  categoryId: Int
  id: Int!
}

input CreateTagInput {
  name: String!
}

input UpdateTagInput {
  name: String
  id: Int!
}

input CreateVideoInput {
  name: String!
  description: String
  videoFileId: Int!
  videoPreviewId: Int
  categoryId: Int
  subCategoryId: Int
}

input FileInput {
  file: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UpdateVideoInput {
  name: String
  description: String
  videoFileId: Int
  videoPreviewId: Int
  categoryId: Int
  subCategoryId: Int
  id: Int!
}

input CreatePlaylistInput {
  name: String!
}

input UpdatePlaylistInput {
  name: String
  id: Int!
}

input VideoPlaylistInput {
  playlistId: Int!
  videoId: Int!
}

input CreateViewInput {
  videoId: Int!
}

input UpdateViewInput {
  videoId: Int
  id: Int!
  userId: Int!
}

input CreateCommentInput {
  text: String!
  videoId: Int!
  parentId: Int
}

input UpdateCommentInput {
  text: String
  videoId: Int
  parentId: Int
  id: Int!
}

input CreateRatingInput {
  videoId: Int
  commentId: Int
  type: RatingEnum!
}

input UpdateRatingInput {
  videoId: Int
  commentId: Int
  type: RatingEnum
  id: Int!
}

input CreateBannerInput {
  publishDate: DateTime
  unpublishDate: DateTime
  title: String!
  description: String
  type: BannerTypes!
  bannerImageId: Int!
  bannerVideoId: Int
}

input UpdateBannerInput {
  publishDate: DateTime
  unpublishDate: DateTime
  title: String
  description: String
  type: BannerTypes
  bannerImageId: Int
  bannerVideoId: Int
  id: Int!
}

input CreateNotificationInput {
  userId: Int
  type: Notifications!
}

input UpdateNotificationInput {
  userId: Int
  type: Notifications
  id: Int!
}

input CreateSettingInput {
  userId: Int!
}

input UpdateSettingInput {
  id: Int!
  userId: Int
  privacy: Privacy
}

input CreateComplaintInput {
  reason: ComplaintReasons!
  message: String!
  userId: Int
  videoId: Int
}

input UpdateComplaintInput {
  reason: ComplaintReasons
  message: String
  userId: Int
  videoId: Int
  id: Int!
}

input CreatePartnerRequestInput {
  message: String!
}

input UpdatePartnerRequestInput {
  message: String
  id: Int!
  status: PartnerRequestStatuses
}

type Subscription {
  getMonitoring: Monitoring!
}